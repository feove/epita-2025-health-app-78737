@page "/doctor-appointments"
@attribute [Authorize(Roles = "Doctor")]
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@using BlazorHealthApp2025.Services
@inject EmailSender EmailSender
@using BlazorHealthApp2025.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@rendermode InteractiveServer


@page "/doctor-dashboard"
<PageTitle>Doctor Dashboard</PageTitle>

<h3>Pending Appointments</h3>

@if (appointments?.Any() == true)
{
    <ul class="list-group mb-4">
        @foreach (var appt in appointments.OrderBy(a => a.AppointmentDate))
        {
            <li class="list-group-item d-flex justify-content-between align-items-start">
                <div>
                    <strong>@appt.AppointmentDate.ToString("f")</strong><br />
                    <span>@appt.Description</span><br />
                    <small class="text-muted">Patient: @patientNames.GetValueOrDefault(appt.PatientId, "Unknown")</small>

                </div>
                <div class="d-flex flex-column gap-1">
                    <button class="btn btn-success btn-sm" @onclick="@(() => ConfirmAppointment(appt))">Confirm</button>
                    <button class="btn btn-danger btn-sm" @onclick="@(() => RejectAppointment(appt.Id))">Reject</button>
                </div>
            </li>
        }
    </ul>
}
else
{
    <p>No pending appointments assigned to you.</p>
}

<h3>Confirmed Upcoming Appointments</h3>

@if (confirmedAppointments?.Any() == true)
{
    <ul class="list-group">
        @foreach (var appt in confirmedAppointments.OrderBy(a => a.AppointmentDate))
        {
            <li class="list-group-item">
                <strong>@appt.AppointmentDate.ToString("f")</strong><br />
                <span>@appt.Description</span><br />
                <small class="text-muted">Patient: @patientNames.GetValueOrDefault(appt.PatientId, "Unknown")</small>

            </li>
        }
    </ul>
}
else
{
    <p>No confirmed appointments.</p>
}

@code {
    private List<Appointment> appointments = new();
    private List<Appointment> confirmedAppointments = new();
    private string currentDoctorId = string.Empty;

    private Dictionary<string, string> patientNames = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentDoctorId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;

        if (!string.IsNullOrEmpty(currentDoctorId))
        {
            appointments = await DbContext.Appointments
                .Where(a => a.DoctorId == currentDoctorId && !a.IsConfirmed)
                .ToListAsync();

            var allConfirmed = await DbContext.Appointments
                .Where(a => a.DoctorId == currentDoctorId && a.IsConfirmed)
                .ToListAsync();

            confirmedAppointments = allConfirmed
                .Where(a => a.AppointmentDate >= DateTime.Now)
                .ToList();

            var expiredAppointments = allConfirmed
                .Where(a => a.AppointmentDate < DateTime.Now)
                .ToList();

            if (expiredAppointments.Any())
            {
                DbContext.Appointments.RemoveRange(expiredAppointments);
                await DbContext.SaveChangesAsync();
            }

            // Get patient IDs from both lists
            var patientIds = appointments.Select(a => a.PatientId)
                .Concat(confirmedAppointments.Select(a => a.PatientId))
                .Distinct()
                .ToList();

            // Fetch full names
            patientNames = await DbContext.Users
                .Where(u => patientIds.Contains(u.Id))
                .ToDictionaryAsync(u => u.Id, u => u.FirstName + " " + u.LastName);
        }

    }

    private async Task ConfirmAppointment(Appointment appt)
    {
        var appUser = await UserManager.FindByIdAsync(appt.PatientId);
        var docUser = await UserManager.FindByIdAsync(appt.DoctorId);
        await EmailSender.Execute("Appointement Confirmation", $"Hello {appUser.FirstName},\nyou have a confirmation on your appointement with {docUser.FirstName} {docUser.LastName} on the {appt.AppointmentDate} for {appt.Description}.\nIboren Health", appUser.Email);
        await EmailSender.Execute("Appointement Notice", $"Hello {docUser.FirstName},\nyou have an appointement with {appUser.FirstName} {appUser.LastName} on the {appt.AppointmentDate} for {appt.Description}.\nIboren Health", docUser.Email);

        appt.IsConfirmed = true;
        DbContext.Appointments.Update(appt);

        var entry = new CalendarEntry
        {
            PatientId = appt.PatientId,
            Date = appt.AppointmentDate,
            Notes = appt.Description,
            AppointmentId = appt.Id,
            IsConfirmed = true
        };

        //let's learn how to bypass the user story kids!
        //this whole stuff is so damn scuffed but it'll work for the presentation
        DateTime currentDateTime = DateTime.Now;
        TimeSpan difference = appt.AppointmentDate - currentDateTime;
        if (difference.TotalHours <= 24)
        {
            await EmailSender.Execute("Appointement Reminder", $"Hello {appUser.FirstName},\nyou have your appointement with {docUser.FirstName}{docUser.LastName} on the {appt.AppointmentDate} for {appt.Description} in less than 24hours!\nIboren Health", appUser.Email);
        }

        DbContext.CalendarEntries.Add(entry);

        await DbContext.SaveChangesAsync();
        appointments.Remove(appt);
        confirmedAppointments.Add(appt);
        StateHasChanged();
    }

    private async Task RejectAppointment(int appointmentId)
    {
        var appt = await DbContext.Appointments.FindAsync(appointmentId);
        if (appt != null)
        {
            var appUser = await UserManager.FindByIdAsync(appt.PatientId);
            var docUser = await UserManager.FindByIdAsync(appt.DoctorId);
            await EmailSender.Execute("Appointement", $"Hello {appUser.FirstName},\nyour submission for an appointement with {docUser.FirstName} {docUser.LastName} on the {appt.AppointmentDate} for {appt.Description} has been declined.\nIburen Health", appUser.Email);
            await EmailSender.Execute("Appointement", $"Hello {docUser.FirstName},\nyou no longer have an appointement with {appUser.FirstName} {appUser.LastName} on the {appt.AppointmentDate} for {appt.Description}.\nIburen Health", docUser.Email);
            DbContext.Appointments.Remove(appt);
            await DbContext.SaveChangesAsync();

            appointments.Remove(appt);
            StateHasChanged();
        }
    }
}
