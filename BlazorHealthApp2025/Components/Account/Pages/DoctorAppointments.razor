@page "/doctor-appointments"
@attribute [Authorize(Roles = "Doctor")]
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@using BlazorHealthApp2025.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@rendermode InteractiveServer

<h3>Pending Appointments</h3>

@if (appointments?.Any() == true)
{
    <ul class="list-group">
        @foreach (var appt in appointments.OrderBy(a => a.AppointmentDate))
        {
            <li class="list-group-item d-flex justify-content-between align-items-start">
                <div>
                    <strong>@appt.AppointmentDate.ToString("f")</strong><br />
                    <span>@appt.Description</span><br />
                    <small class="text-muted">Patient ID: @appt.PatientId</small>
                </div>
                <div class="d-flex flex-column gap-1">
                    <button class="btn btn-success btn-sm" @onclick="@(() => ConfirmAppointment(appt))">Confirm</button>
                    <button class="btn btn-danger btn-sm" @onclick="@(() => RejectAppointment(appt.Id))">Reject</button>
                </div>
            </li>
        }
    </ul>
}
else
{
    <p>No pending appointments assigned to you.</p>
}

@code {
    private List<Appointment> appointments = new();
    private string currentDoctorId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentDoctorId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty;

        if (!string.IsNullOrEmpty(currentDoctorId))
        {
            appointments = await DbContext.Appointments
                .Where(a => a.DoctorId == currentDoctorId && !a.IsConfirmed)
                .ToListAsync();
        }
    }

    private async Task ConfirmAppointment(Appointment appt)
    {
        appt.IsConfirmed = true;
        DbContext.Appointments.Update(appt);

        var entry = new CalendarEntry
        {
            PatientId = appt.PatientId,
            Date = appt.AppointmentDate,
            Notes = appt.Description,
            AppointmentId = appt.Id,
            IsConfirmed = true
        };

        DbContext.CalendarEntries.Add(entry);

        await DbContext.SaveChangesAsync();
        appointments.Remove(appt);
        StateHasChanged();
    }

    private async Task RejectAppointment(int appointmentId)
    {
        var appt = await DbContext.Appointments.FindAsync(appointmentId);
        if (appt != null)
        {
            DbContext.Appointments.Remove(appt);
            await DbContext.SaveChangesAsync();

            appointments.Remove(appt);
            StateHasChanged();
        }
    }
}
