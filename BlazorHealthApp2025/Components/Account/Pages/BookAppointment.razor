@page "/appointments"

@using Microsoft.AspNetCore.Authorization
@using BlazorHealthApp2025.Data
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@rendermode InteractiveServer

<PageTitle>Book Appointment</PageTitle>

<h3>Book an Appointment</h3>

@if (isPatient || !isPatient)
{
    <EditForm Model="appointment" OnValidSubmit="SubmitAppointment">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Removed Appointment Date Input, replaced with Go Schedule Button -->
        <div class="mb-3">
            <button type="button" class="btn btn-info" @onclick="GoToSchedulePage">Go to Schedule</button>
        </div>

        <div class="form-floating mb-3">
            <InputTextArea @bind-Value="appointment.Description" class="form-control" placeholder="Appointment Description" />
            <label>Description</label>
        </div>

        <div class="form-floating mb-3">
            <input @bind="doctorSearch" @oninput="SearchDoctors" placeholder="Search Doctor" class="form-control" />
            <label>Search Doctor</label>
            <ul class="list-group mt-2">
                @foreach (var doctor in filteredDoctors)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>@doctor.UserName</span>
                        <button class="btn @((doctor.Id == selectedDoctorId) ? "btn-success" : "btn-outline-primary")" @onclick="@(() => ToggleDoctorSelection(doctor))">
                            @if (doctor.Id == selectedDoctorId)
                            {
                                <span>âœ“ Selected</span>
                            }
                            else
                            {
                                <span>Select</span>
                            }
                        </button>
                    </li>
                }
            </ul>
        </div>

        <p>Selected Doctor: @selectedDoctorName</p>

        <button type="submit" class="btn btn-primary" disabled="@isSubmitDisabled">Book Appointment</button>

        </EditForm>

    <hr />

    <h4>Your Appointments</h4>

    @if (appointments?.Any() == true)
    {
    <ul class="list-group">
        @foreach (var appt in appointments.OrderBy(a => a.AppointmentDate))
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <strong>@appt.AppointmentDate.ToString("f"):</strong>
                    <br />
                    @appt.Description
                    <br />
                    <span>Doctor: @appt.DoctorName</span>
                    <br />
                    @if (appt.IsConfirmed)
                    {
                        <span class="badge bg-success">Confirmed</span>
                    }
                    else
                    {
                        <span class="badge bg-warning text-dark">Pending</span>
                    }
                </div>
                
                @if (!appt.IsConfirmed)
                {
                    <button class="btn btn-danger btn-sm" @onclick="@(() => CancelAppointment(appt.Id))">Cancel</button>
                }
            </li>
        }
    </ul>
    }
    else
    {
        <p>No appointments booked yet.</p>
    }

    }
    else
    {
        <p>You do not have access to book an appointment. Please contact support.</p>
    }

    @code {
    private Appointment appointment = new();
    private List<Appointment> appointments = new();
    private List<ApplicationUser> doctors = new();
    private List<ApplicationUser> filteredDoctors = new();
    private string doctorSearch = string.Empty;
    private string selectedDoctorId = string.Empty;
    private string selectedDoctorName = "None";
    private bool isPatient = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            var appUser = await UserManager.GetUserAsync(user);
            isPatient = appUser != null && await UserManager.IsInRoleAsync(appUser, "Patient");

            if (isPatient || !isPatient)
            {
                appointments = await DbContext.Appointments.Where(a => a.PatientId == userId).ToListAsync();
                doctors = (await UserManager.GetUsersInRoleAsync("Doctor")).ToList();
                filteredDoctors = doctors;
            }
        }
    }

    private async Task CancelAppointment(int appointmentId)
    {
        var appt = await DbContext.Appointments.FindAsync(appointmentId);

        if (appt != null && !appt.IsConfirmed)
        {
            DbContext.Appointments.Remove(appt);
            await DbContext.SaveChangesAsync();

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;

            appointments = await DbContext.Appointments
                .Where(a => a.PatientId == userId)
                .ToListAsync();
        }
    }

    private bool isSubmitDisabled =>
    string.IsNullOrEmpty(selectedDoctorId)
    || string.IsNullOrWhiteSpace(appointment.Description)
    || !IsAppointmentTimeSelected();

    private bool IsAppointmentTimeSelected()
    {
    // Check in user Temp fields
    var authStateTask = AuthenticationStateProvider.GetAuthenticationStateAsync();
    authStateTask.Wait(); // not great but okay in computed property
    var user = authStateTask.Result.User;
    var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
    var appUserTask = UserManager.FindByIdAsync(userId);
    appUserTask.Wait();
    var appUser = appUserTask.Result;

    return appUser != null &&
           appUser.TempAppointmentDate.HasValue &&
           !string.IsNullOrEmpty(appUser.TempAppointmentTime);
    }


    private void SearchDoctors(ChangeEventArgs e)
    {
        var searchQuery = e.Value?.ToString()?.ToLower() ?? string.Empty;
        filteredDoctors = doctors.Where(d => d.UserName.ToLower().Contains(searchQuery)).ToList();
        StateHasChanged(); // Explicitly update the UI
    }

   private async Task ToggleDoctorSelection(ApplicationUser doctor)
    {
        if (doctor.Id == selectedDoctorId)
        {
            // Unselect the doctor
            selectedDoctorId = string.Empty;
            selectedDoctorName = "None";

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            var appUser = await UserManager.FindByIdAsync(userId);

            if (appUser != null)
            {
                appUser.TempDoctorId = string.Empty;
                appUser.TempDoctorName = string.Empty;
                await UserManager.UpdateAsync(appUser);
            }
        }
        else
        {
            // Select the doctor
            selectedDoctorId = doctor.Id;
            selectedDoctorName = doctor.UserName;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            var appUser = await UserManager.FindByIdAsync(userId);

            if (appUser != null)
            {
                appUser.TempDoctorId = selectedDoctorId;
                appUser.TempDoctorName = selectedDoctorName;
                await UserManager.UpdateAsync(appUser);
            }
        }

        StateHasChanged();
    }


    private void GoToSchedulePage()
    {
       
        NavigationManager.NavigateTo("/schedule"); 
    }

    
    private async Task SubmitAppointment()
    {
        
    
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;

        if (user?.Identity?.IsAuthenticated == true )
        {
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? string.Empty;
            
                var appUser = await UserManager.FindByIdAsync(userId);


                //Tmp Check

                if (appUser == null){
                    Console.WriteLine("appUser is NULL !");
                    return;
                }


                if (string.IsNullOrEmpty(appUser.TempDoctorId)){

                    Console.WriteLine("appUser.TempDoctorId is NULL !");
                }


                if (appUser != null &&
                    appUser.TempAppointmentDate.HasValue &&
                    !string.IsNullOrEmpty(appUser.TempAppointmentTime) &&
                    !string.IsNullOrEmpty(appUser.TempDoctorId))
                {
                    // Parse the time string into a TimeSpan
                    var timeParts = appUser.TempAppointmentTime.Split(':');
                    int hour = int.Parse(timeParts[0]);
                    int minute = int.Parse(timeParts[1]);

                    var appointmentDateTime = new DateTime(
                        appUser.TempAppointmentDate.Value.Year,
                        appUser.TempAppointmentDate.Value.Month,
                        appUser.TempAppointmentDate.Value.Day,
                        hour,
                        minute,
                        0
                    );

                   var newAppointment = new Appointment
                    {
                        PatientId = appUser.Id,
                        AppointmentDate = appointmentDateTime,
                        Description = appointment.Description,
                        DoctorId = appUser.TempDoctorId,
                        DoctorName = appUser.TempDoctorName,
                        IsConfirmed = !isPatient
                    };


                    DbContext.Appointments.Add(newAppointment);

                    // Optional: Clear temp fields
                    appUser.TempAppointmentDate = null;
                    appUser.TempAppointmentTime = string.Empty;
                    appUser.TempDoctorId = string.Empty;
                    appUser.TempDoctorName = string.Empty;

                    await DbContext.SaveChangesAsync();
                    await UserManager.UpdateAsync(appUser);

                    // Reload appointments list
                    appointments = await DbContext.Appointments
                        .Where(a => a.PatientId == appUser.Id)
                        .ToListAsync();

                    // Clear form
                    appointment = new Appointment();
                    selectedDoctorId = string.Empty;
                    selectedDoctorName = "None";

                
                
                }else{
                    Console.WriteLine("Error: Please select a doctor and schedule an appointment time first.");
                }
            }
    }

}
