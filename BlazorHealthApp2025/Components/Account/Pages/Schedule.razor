@page "/schedule"
@using System.Globalization
@using BlazorHealthApp2025.Data
@using BlazorHealthApp2025.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AdminService adminService

@rendermode InteractiveServer

<div class="calendar-container">
    <h1 class="calendar-header">Select Your Appointment</h1>

    <div class="calendar-navigation">
        <button class="nav-btn" @onclick="PreviousMonth">&#8592;</button>
        <div class="calendar-month-title">@currentMonth @currentYear</div>
        <button class="nav-btn" @onclick="NextMonth">&#8594;</button>
    </div>

    <div class="calendar">
        @foreach (var dayName in dayNames)
        {
            <div class="calendar-day-name">@dayName</div>
        }



        @foreach (var day in days)
        {
           <div class="calendar-day @(day.IsAvailable ? "available" : "busy") @(day.IsSelected ? "selected" : "")"
                @onclick="() => SelectDay(day)">
                @day.Number
                @if (!day.IsAvailable)
                {
                    <div class="busy-indicator">Busy</div>
                }
            </div>
            @if (!day.IsAvailable && isAdmin) 
            {
                <button class="btn btn-danger btn-sm" @onclick="() => DeleteAppointment(day.Number)">Delete</button>
            }

        }
    </div>

    @if (selectedDay != null)
    {
        <div class="time-slot-container">
            <div class="time-slot-selector">
                <select @bind="selectedTimeSlot">
                    @foreach (var timeSlot in availableTimeSlots)
                    {
                        <option value="@timeSlot">@timeSlot</option>
                    }
                </select>
            </div>
            <button class="confirm-btn" @onclick="ConfirmAppointment">Confirm</button>
        </div>
    }

    @if (!string.IsNullOrEmpty(selectedTimeSlot))
    {
        <p>Selected Time: @selectedTimeSlot</p>
    }

</div>

@code {
    private DateTime currentDate = DateTime.Now;
    private string currentMonth => currentDate.ToString("MMMM");
    private int currentYear => currentDate.Year;
    private List<string> dayNames = new() { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
    private List<Day> days = new();
    private Day? selectedDay = null;
    private string selectedTimeSlot = string.Empty;

    private List<string> availableTimeSlots = new();

      private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        isAdmin = user.IsInRole("Admin"); 

        await GenerateCalendar();
    }

    private async Task GenerateCalendar()
{
    days.Clear();
    int daysInMonth = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);

    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;
    var userId = user.FindFirst(c => c.Type == "sub")?.Value ?? string.Empty;

    var appointments = await DbContext.Appointments
        .Where(a => a.AppointmentDate.Month == currentDate.Month && a.AppointmentDate.Year == currentDate.Year)
        .ToListAsync();

    var calendarEntries = await DbContext.CalendarEntries
        .Where(c => c.Date.Month == currentDate.Month && c.Date.Year == currentDate.Year)
        .ToListAsync();

    for (int i = 1; i <= daysInMonth; i++)
    {
        bool isBusy = appointments.Any(a => a.AppointmentDate.Day == i && a.IsConfirmed) ||
                      calendarEntries.Any(c => c.Date.Day == i);

        days.Add(new Day { Number = i, IsAvailable = !isBusy, IsSelected = false });
    }
}


  private async Task NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
        await GenerateCalendar();
    }

    private async Task PreviousMonth()
    {
        currentDate = currentDate.AddMonths(-1);
        await GenerateCalendar();
    }

    private void SelectDay(Day day)
    {   


        selectedDay = day;
        availableTimeSlots = GenerateAvailableTimeSlots(day.Number);
        selectedTimeSlot = availableTimeSlots.FirstOrDefault() ?? string.Empty;

        // Mark other days as unselected
        foreach (var d in days) d.IsSelected = false;
        day.IsSelected = true;

        if (selectedDay == null)
        {
            Console.WriteLine("Error: No day selected.");
            return;
        }
    }

    private List<string> GenerateAvailableTimeSlots(int day)
    {
        List<string> slots = new();
        DateTime baseDate = new DateTime(currentDate.Year, currentDate.Month, day);

        for (int i = 8; i < 18; i++) // 8 AM to 5 PM (18:00)
        {
            slots.Add($"{i}:00");
            slots.Add($"{i}:30");
        }

        return slots;
    }



    private async Task DeleteAppointment(int dayNumber)
    {
        var appointment = await DbContext.Appointments
            .FirstOrDefaultAsync(a => a.AppointmentDate.Day == dayNumber && a.AppointmentDate.Month == currentDate.Month && a.AppointmentDate.Year == currentDate.Year);

        if (appointment != null)
        {
            await adminService.DeleteAppointmentAsync(appointment.Id);
            await GenerateCalendar();
        }
    }
   
    private async Task ConfirmAppointment()
{
    // Get the current authentication state to access the user's information
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    // Check if the user is authenticated
    if (user.Identity == null || !user.Identity.IsAuthenticated)
    {
        Console.WriteLine("User is not authenticated.");
        return;
    }

    // Log the user's claims for debugging purposes
    foreach (var claim in user.Claims)
    {
        Console.WriteLine($"Claim Type: {claim.Type}, Value: {claim.Value}");
    }

    // Retrieve the user's ID from claims
    string? userId = null;

    // First, try to get the NameIdentifier claim (preferred claim for user ID)
    var claimNameIdentifier = user.FindFirst(ClaimTypes.NameIdentifier);
    if (claimNameIdentifier != null)
    {
        userId = claimNameIdentifier.Value;
    }
    else
    {
        // If the NameIdentifier claim is not found, try "sub" or "nameidentifier" claims
        var claimAlt = user.FindFirst(c => c.Type == "sub")
                       ?? user.FindFirst(c => c.Type == "nameidentifier");
        if (claimAlt != null)
        {
            userId = claimAlt.Value;
        }
    }

    // Log the retrieved user ID
    Console.WriteLine($"Retrieved userId: {userId}");

    // Check if userId is null or empty, and handle the error if necessary
    if (string.IsNullOrEmpty(userId))
    {
        Console.WriteLine("Error: User ID is null or empty.");
        return;
    }

    // Retrieve the user from the database using the userId
    var appUser = await UserManager.FindByIdAsync(userId);

    // Check if the user was found in the database
    if (appUser == null)
    {
        Console.WriteLine($"Error: No user found with ID {userId}.");
        return;
    }

    Console.WriteLine($"Success: Found user {appUser.Email}.");

    if (selectedDay != null && !string.IsNullOrEmpty(selectedTimeSlot))
    {
        var appointmentDateTime = new DateTime(currentDate.Year, currentDate.Month, selectedDay.Number, 
                                                int.Parse(selectedTimeSlot.Split(':')[0]), 
                                                int.Parse(selectedTimeSlot.Split(':')[1]), 0);

        var appointment = new Appointment
        {
            AppointmentDate = appointmentDateTime,
            PatientId = appUser.Id,
            DoctorId = "your_doctor_id_here", // Replace with actual doctor ID
            Description = "Appointment description here" // Optional: Add description
        };

        DbContext.Appointments.Add(appointment);
        await DbContext.SaveChangesAsync();

        Console.WriteLine($"Appointment confirmed for {appUser.Email} on {appointment.AppointmentDate}.");
    }
    else
    {
        Console.WriteLine("Error: No day or time slot selected.");
    }
}

    public class Day
    {
        public int Number { get; set; }
        public bool IsAvailable { get; set; }
        public bool IsSelected { get; set; }
    }
}
