@page "/schedule"
@using System.Globalization
@using BlazorHealthApp2025.Data
@using BlazorHealthApp2025.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AdminService adminService

@rendermode InteractiveServer

<div class="calendar-container">
    <h1 class="calendar-header">Select Your Appointment</h1>

    <div class="calendar-navigation">
        <button class="nav-btn" @onclick="PreviousMonth">&#8592;</button>
        <div class="calendar-month-title">@currentMonth @currentYear</div>
        <button class="nav-btn" @onclick="NextMonth">&#8594;</button>
    </div>

    <div class="calendar">
        @foreach (var dayName in dayNames)
        {
            <div class="calendar-day-name">@dayName</div>
        }



        @foreach (var day in days)
        {
           <div class="calendar-day @(day.IsAvailable ? "available" : "busy") @(day.IsSelected ? "selected" : "")"
                @onclick="() => SelectDay(day)">
                @day.Number
                @if (!day.IsAvailable)
                {
                    <div class="busy-indicator">Busy</div>
                }
            </div>
            @if (!day.IsAvailable) //And role of user is admin
            {
                <button class="btn btn-danger btn-sm" @onclick="() => DeleteAppointment(day.Number)">Delete</button>
            }

        }
    </div>

    @if (selectedDay != null)
    {
        <div class="time-slot-container">
            <div class="time-slot-selector">
                <select @bind="selectedTimeSlot">
                    @foreach (var timeSlot in availableTimeSlots)
                    {
                        <option value="@timeSlot">@timeSlot</option>
                    }
                </select>
            </div>
            <button class="confirm-btn" @onclick="ConfirmAppointment">Confirm</button>
        </div>
    }

    
</div>

@code {
    private DateTime currentDate = DateTime.Now;
    private string currentMonth => currentDate.ToString("MMMM");
    private int currentYear => currentDate.Year;
    private List<string> dayNames = new() { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
    private List<Day> days = new();
    private Day? selectedDay = null;
    private string selectedTimeSlot = string.Empty;

    private List<string> availableTimeSlots = new();

    protected override async Task OnInitializedAsync()
    {
        await GenerateCalendar();
    }


   private async Task GenerateCalendar()
    {
        days.Clear();
        int daysInMonth = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);
        Console.WriteLine($"Generating calendar for {currentMonth} {currentYear}, days in month: {daysInMonth}");

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(c => c.Type == "sub")?.Value ?? string.Empty;

        // This line is causing the error when connection is already disposed
        var appointments = await DbContext.Appointments
            .Where(a => a.AppointmentDate.Month == currentDate.Month && a.AppointmentDate.Year == currentDate.Year)
            .ToListAsync();

        for (int i = 1; i <= daysInMonth; i++)
        {
            bool isBusy = appointments.Any(a => a.AppointmentDate.Day == i);
            days.Add(new Day { Number = i, IsAvailable = !isBusy, IsSelected = false });
        }

        Console.WriteLine($"Generated {days.Count} days.");
    }




  private async Task NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
        await GenerateCalendar();
    }

    private async Task PreviousMonth()
    {
        currentDate = currentDate.AddMonths(-1);
        await GenerateCalendar();
    }

    private void SelectDay(Day day)
    {
        selectedDay = day;
        availableTimeSlots = GenerateAvailableTimeSlots(day.Number);
        selectedTimeSlot = availableTimeSlots.FirstOrDefault() ?? string.Empty;

        // Mark other days as unselected
        foreach (var d in days) d.IsSelected = false;
        day.IsSelected = true;
    }

    private List<string> GenerateAvailableTimeSlots(int day)
    {
        List<string> slots = new();
        DateTime baseDate = new DateTime(currentDate.Year, currentDate.Month, day);

        for (int i = 8; i < 18; i++) // 8 AM to 5 PM (18:00)
        {
            slots.Add($"{i}:00");
            slots.Add($"{i}:30");
        }

        return slots;
    }


   private async Task ConfirmAppointment()
{
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;

    if (user.Identity != null && user.Identity.IsAuthenticated)
    {
        var userId = user.FindFirst(c => c.Type == "sub")?.Value ?? string.Empty;
        var appUser = await UserManager.FindByIdAsync(userId);

        if (appUser != null)
        {
            // Confirm and set appointment
            var newAppointment = new Appointment
            {
                PatientId = appUser.Id,
                AppointmentDate = new DateTime(currentYear, currentDate.Month, selectedDay.Number),
                Description = "Your appointment description here", // Make sure to set a description
                DoctorId = "your-doctor-id", // Add logic for assigning doctor
                DoctorName = "Doctor Name" // You can pull this from your database or user profile
            };

            DbContext.Appointments.Add(newAppointment);
            await DbContext.SaveChangesAsync();
        }
    }

    NavigationManager.NavigateTo("/appointments");
}

    
    private async Task DeleteAppointment(int dayNumber)
    {
        var appointment = await DbContext.Appointments
            .FirstOrDefaultAsync(a => a.AppointmentDate.Day == dayNumber && a.AppointmentDate.Month == currentDate.Month && a.AppointmentDate.Year == currentDate.Year);

        if (appointment != null)
        {
            await adminService.DeleteAppointmentAsync(appointment.Id);
            GenerateCalendar();
        }
    }

    public class Day
    {
        public int Number { get; set; }
        public bool IsAvailable { get; set; }
        public bool IsSelected { get; set; }
    }
}
