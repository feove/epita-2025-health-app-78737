@page "/schedule"
@using System.Globalization
@using BlazorHealthApp2025.Data
@using BlazorHealthApp2025.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AdminService adminService

@rendermode InteractiveServer

<div class="calendar-container">
    <h1 class="calendar-header">Select Your Appointment</h1>

    <div class="calendar-navigation">
        <button class="nav-btn" @onclick="PreviousMonth">&#8592;</button>
        <div class="calendar-month-title">@currentMonth @currentYear</div>
        <button class="nav-btn" @onclick="NextMonth">&#8594;</button>
    </div>

    <div class="calendar">
        @foreach (var dayName in dayNames)
        {
            <div class="calendar-day-name">@dayName</div>
        }



        @foreach (var day in days)
        {
           <div class="calendar-day @(day.IsSelected ? "selected" : "")"
                @onclick="() => SelectDay(day)">
            <div class="day-number">@day.Number</div>

            <div class="mini-slot-grid">
                @foreach (var slot in GenerateAvailableTimeSlots(day.Number))
                {
                    bool isBusy = day.BusyTimeSlots.Contains(slot);
                    <div class="mini-slot @(isBusy ? "mini-busy" : "mini-free")"></div>
                }
                </div>
            </div>  

        }
    </div>

    @if (selectedDay != null)
    {
        <div class="time-slot-container">

            @if (!isAdmin)
            {
                <div class="time-slot-selector">
                    <select @bind="selectedTimeSlot">
                        @foreach (var timeSlot in availableTimeSlots)
                        {
                            var isBusy = busyTimeSlots.Contains(timeSlot);
                            <option value="@timeSlot" disabled="@isBusy" style="@(isBusy ? "color: orange;" : "")">
                                @timeSlot @(isBusy ? " - Unavailable" : "")
                            </option>
                        }
                    </select>
                </div>
                <button class="confirm-btn" @onclick="ConfirmAppointment">Confirm</button>
            }
            else
            {
                <div class="admin-time-slot-list">
                @foreach (var timeSlot in availableTimeSlots)
                {
                    var isBusy = busyTimeSlots.Contains(timeSlot);

                    <div class="admin-time-slot-entry">
                        <span style="@(isBusy ? "color: orange;" : "")">@timeSlot</span>

                        @if (isBusy)
                        {
                            <button class="btn btn-sm btn-danger ms-2" @onclick="() => DeleteTimeSlot(timeSlot)">Delete</button>
                        }
                        <button class="btn btn-sm btn-success ms-2" @onclick="() => ShowPatientSelector(timeSlot)">Add</button>
                    </div>
                }

                @if (showPatientSelector && timeSlotToBookForPatient != null)
                {
                    <div class="mt-2">
                        <label>Select Patient:</label>
                        <select @bind="selectedPatientId" class="form-select mb-2">
                            <option value="">-- Select Patient --</option>
                            @foreach (var patient in patientList)
                            {
                                <option value="@patient.Id">@patient.Email</option>
                            }
                        </select>

                        <div>
                            <button class="btn btn-primary me-2" @onclick="ConfirmPatientBooking">Confirm</button>
                            <button class="btn btn-secondary" @onclick="CancelPatientSelector">Cancel</button>
                        </div>
                    </div>
                }
            </div>

            }


        </div>
    }

</div>

@code {
    private DateTime currentDate = DateTime.Now;
    private string currentMonth => currentDate.ToString("MMMM");
    private int currentYear => currentDate.Year;
    private List<string> dayNames = new() { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
    private List<Day> days = new();
    private Day? selectedDay = null;
    private string selectedTimeSlot = string.Empty;
    private List<string> busyTimeSlots = new();
    private List<string> availableTimeSlots = new();
    private bool showPatientSelector = false;
    private string selectedPatientId = string.Empty;
    private string? timeSlotToBookForPatient = null;
    private List<ApplicationUser> patientList = new();
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        isAdmin = user.IsInRole("Admin"); 

        patientList = (await UserManager.GetUsersInRoleAsync("Patient")).ToList();

        await GenerateCalendar();
    }

    

    private async Task GenerateCalendar()
{
    days.Clear();
    int daysInMonth = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);

    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = authState.User;
    var userId = user.FindFirst(c => c.Type == "sub")?.Value ?? string.Empty;

    var appointments = await DbContext.Appointments
        .Where(a => a.AppointmentDate.Month == currentDate.Month && a.AppointmentDate.Year == currentDate.Year)
        .ToListAsync();

    var calendarEntries = await DbContext.CalendarEntries
        .Where(c => c.Date.Month == currentDate.Month && c.Date.Year == currentDate.Year)
        .ToListAsync();

    for (int i = 1; i <= daysInMonth; i++)
    {
        var busySlots = appointments
            .Where(a => a.AppointmentDate.Day == i && a.IsConfirmed)
            .Select(a => a.AppointmentDate.ToString("H:mm"))
            .ToList();

        busySlots.AddRange(
            calendarEntries
                .Where(c => c.Date.Day == i && c.IsConfirmed)
                .Select(c => c.Date.ToString("H:mm"))
        );

        bool isBusy = busySlots.Any();

        days.Add(new Day
        {
            Number = i,
            IsAvailable = !isBusy,
            IsSelected = false,
            BusyTimeSlots = busySlots
        });

    }
}

private void ShowPatientSelector(string timeSlot)
{
    timeSlotToBookForPatient = timeSlot;
    showPatientSelector = true;
    selectedPatientId = string.Empty;
}

private void CancelPatientSelector()
{
    timeSlotToBookForPatient = null;
    showPatientSelector = false;
    selectedPatientId = string.Empty;
}

private async Task ConfirmPatientBooking()
{
    if (string.IsNullOrEmpty(selectedPatientId) || timeSlotToBookForPatient == null || selectedDay == null)
    {
        Console.WriteLine("Missing required info for booking.");
        return;
    }

    var appointmentDate = new DateTime(currentDate.Year, currentDate.Month, selectedDay.Number);

    var patient = await UserManager.FindByIdAsync(selectedPatientId);
    if (patient == null)
    {
        Console.WriteLine("Patient not found.");
        return;
    }

    // Save temp booking
    patient.TempAppointmentDate = appointmentDate;
    patient.TempAppointmentTime = timeSlotToBookForPatient;

    await UserManager.UpdateAsync(patient);

    // Cleanup local state
    showPatientSelector = false;
    timeSlotToBookForPatient = null;
    selectedPatientId = string.Empty;

    // Redirect to /appointments page
    NavigationManager.NavigateTo("/appointments");
}



  private async Task NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
        await GenerateCalendar();
    }

    private async Task PreviousMonth()
    {
        currentDate = currentDate.AddMonths(-1);
        await GenerateCalendar();
    }

    private async Task SelectDay(Day day)
    {
        selectedDay = day;
        selectedTimeSlot = string.Empty;
        busyTimeSlots.Clear();

        // Mark other days as unselected
        foreach (var d in days) d.IsSelected = false;
        day.IsSelected = true;

        if (selectedDay == null)
        {
            Console.WriteLine("Error: No day selected.");
            return;
        }

        // Load available time slots
        availableTimeSlots = GenerateAvailableTimeSlots(day.Number);

        var selectedDate = new DateTime(currentDate.Year, currentDate.Month, day.Number);

        var confirmedAppointments = await DbContext.Appointments
            .Where(a => a.IsConfirmed && a.AppointmentDate.Date == selectedDate.Date)
            .ToListAsync();

        var calendarAppointments = await DbContext.CalendarEntries
            .Where(c => c.Date.Date == selectedDate.Date && c.IsConfirmed)
            .ToListAsync();

        // Combine busy time slots from both sources
        foreach (var appointment in confirmedAppointments)
        {
            busyTimeSlots.Add(appointment.AppointmentDate.ToString("H:mm"));
        }

        foreach (var entry in calendarAppointments)
        {
            busyTimeSlots.Add(entry.Date.ToString("H:mm"));
        }
    }

    private async Task DeleteTimeSlot(string timeSlot)
    {
        if (selectedDay == null) return;

        var selectedDate = new DateTime(currentDate.Year, currentDate.Month, selectedDay.Number);

        if (!TimeSpan.TryParse(timeSlot, out var parsedTime))
        {
            Console.WriteLine("Invalid time format.");
            return;
        }

        var appointment = await DbContext.Appointments
            .FirstOrDefaultAsync(a =>
                a.AppointmentDate.Date == selectedDate.Date &&
                a.AppointmentDate.TimeOfDay == parsedTime &&
                a.IsConfirmed);

        if (appointment != null)
        {
            await adminService.DeleteAppointmentAsync(appointment.Id);
            await GenerateCalendar(); // <--- refresh whole calendar
            await SelectDay(selectedDay); // <--- also refresh dropdown
            return;
        }

        var calendarEntry = await DbContext.CalendarEntries
            .FirstOrDefaultAsync(c =>
                c.Date.Date == selectedDate.Date &&
                c.Date.TimeOfDay == parsedTime &&
                c.IsConfirmed);

        if (calendarEntry != null)
        {
            DbContext.CalendarEntries.Remove(calendarEntry);
            await DbContext.SaveChangesAsync();
            await GenerateCalendar(); // <--- same here
            await SelectDay(selectedDay);
        }
    }

    private List<string> GenerateAvailableTimeSlots(int day)
    {
        List<string> slots = new();
        DateTime baseDate = new DateTime(currentDate.Year, currentDate.Month, day);

        for (int i = 8; i < 18; i++) 
        {
            slots.Add($"{i}:00");
            slots.Add($"{i}:30");
        }

        return slots;
    }



    private async Task DeleteAppointment(int dayNumber)
    {
        var appointment = await DbContext.Appointments
            .FirstOrDefaultAsync(a => a.AppointmentDate.Day == dayNumber && a.AppointmentDate.Month == currentDate.Month && a.AppointmentDate.Year == currentDate.Year);

        if (appointment != null)
        {
            await adminService.DeleteAppointmentAsync(appointment.Id);
            await GenerateCalendar();
        }
    }
   
    private async Task ConfirmAppointment()
    {

        if (busyTimeSlots.Contains(selectedTimeSlot))
        {
            Console.WriteLine("Error: This time slot is already taken.");
            return;
        }


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("User is not authenticated.");
            return;
        }

        string? userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value
                    ?? user.FindFirst("sub")?.Value
                    ?? user.FindFirst("nameidentifier")?.Value;

        if (string.IsNullOrEmpty(userId))
        {
            Console.WriteLine("Error: User ID is null or empty.");
            return;
        }

        var appUser = await UserManager.FindByIdAsync(userId);

        if (appUser == null)
        {
            Console.WriteLine($"Error: No user found with ID {userId}.");
            return;
        }

        if (selectedDay != null && !string.IsNullOrEmpty(selectedTimeSlot))
        {
            // Save just the temp date/time
            var appointmentDate = new DateTime(currentDate.Year, currentDate.Month, selectedDay.Number);

            appUser.TempAppointmentDate = appointmentDate;
            appUser.TempAppointmentTime = selectedTimeSlot;

            await UserManager.UpdateAsync(appUser);

            Console.WriteLine($"Temp appointment saved for user {appUser.Email} on {appointmentDate.ToShortDateString()} at {selectedTimeSlot}.");

            // Navigate back to the main appointment page
            NavigationManager.NavigateTo("/appointments");
        }
        else
        {
            Console.WriteLine("Error: You must pick a date and time from the schedule first.");
        }
}

    public class Day
    {
        public int Number { get; set; }
        public bool IsAvailable { get; set; }
        public bool IsSelected { get; set; }
        public List<string> BusyTimeSlots { get; set; } = new(); 
    }

}
