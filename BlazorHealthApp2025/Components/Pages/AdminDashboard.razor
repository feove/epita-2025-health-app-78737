@page "/admin-dashboard"
@attribute [Authorize(Roles = "Admin")]
@using BlazorHealthApp2025.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using BlazorHealthApp2025.Services
@inject UserManager<ApplicationUser> UserManager
@inject AdminService AdminService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Admin Dashboard</PageTitle>

<h3>Admin Dashboard</h3>

@if (users?.Any() == true)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>User</th>
                <th>Email</th>
                <th>Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@userRoleMap[user.Id]</td>
                    <td>
                        @if (editingUserId == user.Id)
                        {
                            <div>
                            <select @onchange="(e) => SelectRole(e)" class="form-select">
                                @foreach (var role in allRoles)
                                {
                                    <option value="@role" selected="@(selectedRole == role)">@role</option>
                                }
                            </select>

                            <button class="btn btn-success" @onclick="async () => await SaveUserRole(user)">OK</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </div>

                        }
                        else
                        {
                          <button class="btn btn-warning" @onclick="@(() => StartEdit(user.Id))">Change Role</button>

                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No users found.</p>
}

@code {
    private List<ApplicationUser> users = new();
    private Dictionary<string, string> userRoleMap = new();
    private List<string> allRoles = new() { "Patient", "Doctor", "Admin" };
    private string? editingUserId;
    private string selectedRole = "Patient"; // Default role

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAndRolesAsync();
    }

    private async Task LoadUsersAndRolesAsync()
    {
        users = await UserManager.Users.ToListAsync();
        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            userRoleMap[user.Id] = roles.FirstOrDefault() ?? "No Role";
        }
        StateHasChanged();
    }

    private void SelectRole(ChangeEventArgs e)
    {
        selectedRole = e.Value?.ToString() ?? "Patient";
        StateHasChanged();
    }

   private void StartEdit(string userId)
    {
        editingUserId = userId;
        selectedRole = userRoleMap.ContainsKey(userId) ? userRoleMap[userId] : "Patient";
        StateHasChanged();  // Force UI update
    }


    private void CancelEdit()
    {
        editingUserId = null;
        selectedRole = "Doctor";
        StateHasChanged();
    }

    private void SelectRole(ChangeEventArgs e, string role)
    {
        selectedRole = role;
        StateHasChanged();  // Update the state after role selection
    }


    private async Task SaveUserRole(ApplicationUser user)
    {
        if (string.IsNullOrEmpty(selectedRole))
        {
            Console.WriteLine("Error: No role selected.");
            return;
        }

        var currentRoles = await UserManager.GetRolesAsync(user);

        // Remove all current roles
        foreach (var role in currentRoles)
        {
            await UserManager.RemoveFromRoleAsync(user, role);
        }

        // Add the selected role
        await UserManager.AddToRoleAsync(user, selectedRole);
        userRoleMap[user.Id] = selectedRole;
        editingUserId = null;
        await LoadUsersAndRolesAsync();
    }

}
