@page "/admin-dashboard"
@attribute [Authorize(Roles = "Admin")]
@using BlazorHealthApp2025.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using BlazorHealthApp2025.Services  <!-- Add this line -->
@inject UserManager<ApplicationUser> UserManager
@inject AdminService AdminService
@inject NavigationManager NavigationManager

<PageTitle>Admin Dashboard</PageTitle>

<h3>Admin Dashboard</h3>

@if (users?.Any() == true)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>User</th>
                <th>Email</th>
                <th>Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@userRoleMap[user.Id]</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => ChangeUserRole(user)">Change Role</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No users found.</p>
}

@code {
    private List<ApplicationUser> users = new();
    private Dictionary<string, string> userRoleMap = new();

    protected override async Task OnInitializedAsync()
    {
        users = await UserManager.Users.ToListAsync();
        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            userRoleMap[user.Id] = roles.FirstOrDefault() ?? "No Role";
        }
    }

    private async Task ChangeUserRole(ApplicationUser user)
    {
        var currentRoles = await UserManager.GetRolesAsync(user);
        var currentRole = currentRoles.FirstOrDefault() ?? "No Role";
        
        var newRole = currentRole == "Patient" ? "Doctor" : "Patient";

        await AdminService.RemoveRoleFromUser(user, currentRole);
        await AdminService.AddRoleToUser(user, newRole);

        userRoleMap[user.Id] = newRole;
    }
}
