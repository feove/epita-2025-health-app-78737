@page "/admin-dashboard"
@attribute [Authorize(Roles = "Admin")]
@using BlazorHealthApp2025.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using BlazorHealthApp2025.Services
@inject UserManager<ApplicationUser> UserManager
@inject AdminService AdminService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Admin Dashboard</PageTitle>

<h3>Admin Dashboard</h3>

@if (users?.Any() == true)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Email</th>
                <th>Role</th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.FirstName @user.LastName</td>
                    <td>@user.Email</td>
                    <td>@userRoleMap[user.Id]</td>
                    <td>
                    @if (editingUserId == user.Id)
                    {
                        <div>
                            <div class="mb-2">
                                <input class="form-control mb-1" @bind="user.FirstName" placeholder="First Name" />
                                <input class="form-control" @bind="user.LastName" placeholder="Last Name" />
                            </div>

                            <select @onchange="(e) => SelectRole(e)" class="form-select mb-2">

                                @foreach (var role in allRoles)
                                {
                                    <option value="@role" selected="@(selectedRole == role)">@role</option>
                                }
                            </select>

                            <button class="btn btn-success" @onclick="async () => await SaveUserRole(user)">OK</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </div>
                    }
                    else
                    {
                        <button class="btn btn-warning" @onclick="@(() => StartEdit(user.Id))">Edit</button>
                        <button class="btn btn-danger" @onclick="@(() => ConfirmDelete(user.Id))">Delete</button>
                    }
                </td>

                </tr>
            }

            
        </tbody>
    </table>
}
else
{
    <p>No users found.</p>
}

@if (showDeleteConfirmation)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.4); position: fixed; top: 0; left: 0; width: 100%; height: 100%; display: flex; align-items: center; justify-content: center;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this user?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" @onclick="@(() => DeleteUser(pendingDeleteUserId))">Yes, Delete</button>
                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<ApplicationUser> users = new();
    private Dictionary<string, string> userRoleMap = new();
    private List<string> allRoles = new() { "Patient", "Doctor", "Admin" };
    private string? editingUserId;
    private string selectedRole = "Patient"; 

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAndRolesAsync();
    }

    private async Task LoadUsersAndRolesAsync()
    {
        users = await UserManager.Users.ToListAsync();
        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            userRoleMap[user.Id] = roles.FirstOrDefault() ?? "No Role";
        }
        StateHasChanged();
    }

    private void SelectRole(ChangeEventArgs e)
    {
        selectedRole = e.Value?.ToString() ?? "Patient";
        StateHasChanged();
    }

   private void StartEdit(string userId)
    {
        editingUserId = userId;
        selectedRole = userRoleMap.ContainsKey(userId) ? userRoleMap[userId] : "Patient";
        StateHasChanged();  // Force UI update
    }


    private void CancelEdit()
    {
        editingUserId = null;
        selectedRole = "Doctor";
        StateHasChanged();
    }

    private void SelectRole(ChangeEventArgs e, string role)
    {
        selectedRole = role;
        StateHasChanged();  // Update the state after role selection
    }


    private async Task SaveUserRole(ApplicationUser user)
    {
        if (string.IsNullOrEmpty(selectedRole)) return;

        var currentRoles = await UserManager.GetRolesAsync(user);
        foreach (var role in currentRoles)
            await UserManager.RemoveFromRoleAsync(user, role);

        await UserManager.AddToRoleAsync(user, selectedRole);

      
        var existingUser = await UserManager.FindByIdAsync(user.Id);
        if (existingUser != null)
        {
            existingUser.FirstName = user.FirstName;
            existingUser.LastName = user.LastName;
            await UserManager.UpdateAsync(existingUser);
        }

        userRoleMap[user.Id] = selectedRole;
        editingUserId = null;
        await LoadUsersAndRolesAsync();
    }

    private bool showDeleteConfirmation = false;
    private string pendingDeleteUserId = string.Empty;

    private void ConfirmDelete(string userId)
    {
        pendingDeleteUserId = userId;
        showDeleteConfirmation = true;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
        pendingDeleteUserId = string.Empty;
        StateHasChanged();
    }

    private async Task DeleteUser(string userId)
    {
        var user = await UserManager.FindByIdAsync(userId);
        if (user != null)
        {
            var result = await UserManager.DeleteAsync(user);
            if (result.Succeeded)
            {
                users.Remove(user);
                userRoleMap.Remove(userId);
                showDeleteConfirmation = false;
                pendingDeleteUserId = string.Empty;
                StateHasChanged();  // Refresh the UI
            }
            else
            {
                Console.WriteLine("Error: Failed to delete user.");
            }
        }
    }

}
